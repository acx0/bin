#!/usr/bin/env bash

# Copyright 2021 acx0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

# notes:
#   - arg: <empty>|<ipv4-addr>|<ipv6-addr>|<domain-name>
#   - empty query returns results for source IP
#   - order of fields returned matches ordering in `Returned data` table,
#     not order supplied: https://ip-api.com/docs/api:newline_separated

query="$1"
query_fields="status,message,country,regionName,as,asname,mobile,proxy,hosting,query"
response_fields="${query_fields/message,/}"
failed_query_fields="status,message,query"
output_fields="$response_fields"
headers_file="/dev/shm/ip-api-headers"
if [[ $OSTYPE == "darwin"* ]]; then
    headers_file="/tmp/ip-api-headers"
fi

# see: https://ip-api.com/docs/api:newline_separated -> `Usage limits`
check_usage_limit() {
    if [[ ! -f $headers_file ]]; then
        return
    fi

    if [[ -z $(<$headers_file) ]]; then
        echo >&2 "warning: '$headers_file' is empty, skipping rate limit check"
        return
    fi

    requests_remaining=$(grep '^X-Rl:' $headers_file | awk '{print $2}' | tr -d '\r')
    limit_window_end_s=$(grep '^X-Ttl:' $headers_file | awk '{print $2}' | tr -d '\r')
    if [[ $OSTYPE == "darwin"* ]]; then
        file_timestamp_s=$(stat -f '%Z' $headers_file)
    else
        # GNU coreutils stat `-f` != `--format`...
        file_timestamp_s=$(stat --format '%Z' $headers_file)
    fi
    now_timestamp_s=$(date +%s)
    wait_s=$(($file_timestamp_s + $limit_window_end_s - $now_timestamp_s))

    if (( $requests_remaining == 0 )) && (( $wait_s > 0 )); then
        echo >&2 "warning: usage exceeded, $wait_s seconds remaining until window reset"
        echo >&2 -n "sleeping..."
        sleep "$wait_s"
        echo >&2 -e "done\n"
    fi
}

# note: curl suppresses IO error messages with `--silent`
if [[ ! -d $(dirname "$headers_file") ]]; then
    echo >&2 "error: parent dir of 'headers_file' output path doesn't exist or path isn't writeable"
    exit 1
fi

check_usage_limit
response=$(curl \
    --silent \
    --max-time 10 \
    --dump-header "${headers_file}" \
    "http://ip-api.com/line/${query}?fields=${query_fields}")
if [[ $(head -n1 <<< "$response") != "success" ]]; then
    output_fields="$failed_query_fields"
fi

paste <(tr ',' '\n' <<< $output_fields) <(echo "$response") \
    | column -ts $'\t'
